tinymce.PluginManager.requireLangPack('cmsplink','de');
tinymce.PluginManager.add('cmsplink', function(editor, url) {
    editor.addButton('cmsplink', {
        tooltip: tinymce.util.I18n.translate('Insert internal link'),
        image: url + '/img/cmsplink.png',
        stateSelector: 'a[href*="cmsplink"]',
        onclick: function() {
            // reset
            editor.pdata = {
                select_items: new Array(),
                prefix:       'cmsplink',
                current_id:   0,
                current_text: '',
                selected:     true,
                use_title:    false,
                pagelinkcss:  '',
            };
            // get pages list
            jQuery.ajax({
                async   : false,
                cache   : false,
                type    : 'POST',
                dataType: 'xml',
                url     : url+'/cmsplink.php',
                data    : {'_cat_ajax': 1},
                success : function( xml, textStatus, jqXHR  )
                {
                    $(xml).find('item').each(function() {
                        editor.pdata.select_items.push({
        					text: jQuery(this).attr('value'),
        					value: jQuery(this).prop('id'),
                            selected: editor.pdata.selected
        				});
                        if(editor.pdata.selected===true) {
                            editor.pdata.current_id = jQuery(this).prop('id');
                            editor.pdata.current_text = jQuery(this).attr('value');
                        }
                        editor.pdata.selected = false;
                    });
                }
            });
            // Open window
            editor.windowManager.open({
                data:   editor.pdata,
                title:  tinymce.util.I18n.translate('Insert internal link'),
                body: [
                    {
        				type: 'listbox',
        				name: 'page',
                        values: editor.pdata.select_items,
                        value: editor.pdata.select_items[0],
                        autofocus: true,
                        onselect: function(e) {
                            editor.pdata.current_id = e.control.value();
                            editor.pdata.current_text = e.control.text();
        				}
        			},
                    {
                        type: 'checkbox',
                        name: 'use_title',
                        value: 1,
                        text: tinymce.util.I18n.translate('Use page title'),
                        onclick: function(e) { editor.pdata.use_title = e.control.value(); }
                    },
                    {
                        type: 'textbox',
                        name: 'pagelinkcss',
                        label: tinymce.util.I18n.translate('CSS-Class'),
                        onchange: function(e) { editor.pdata.pagelinkcss = e.control.value(); }
                    },
                    {
        				type: 'listbox',
                        name: 'advrel',
        				label: tinymce.util.I18n.translate('Advisory Relation'),
                        onselect: function(e) {
                            editor.pdata.advrel = e.control.value();
        				},
        				values:
        				[
        					{ text: tinymce.util.I18n.translate('not set'), value: 0 },
        					{ text: "Fancybox",	value: "fancybox" },
        					{ text: "Lightbox",	value: "lightbox" },
        					{ text: "PrettyPhoto", value: "prettyPhoto" },
        					{ text: "Alternate", value: "alternate" },
        					{ text: "Copyright", value: "copyright" },
        					{ text: "Designates", value: "designates" },
        					{ text: "No follow", value: "nofollow" },
        					{ text: "Stylesheet", value: "stylesheet" },
        					{ text: "Thumbnail", value: "thumbnail" }
        				],
        			}
                ],
                onSubmit: function(e) {
                    var dom         = editor.dom;
                    var selection   = editor.selection;
                    var selectedElm = selection.getNode();
		            var anchorElm   = dom.getParent(selectedElm, 'a[href]');
                    var text        = anchorElm ? (anchorElm.innerText || anchorElm.textContent) : selection.getContent({format: 'text'}).replace('-','');
                    if ( text === '' || editor.pdata.use_title === 1 ) {
                        text = editor.pdata.current_text;
                    }
                    if (anchorElm) {
                        anchorElm.innerHTML = text;
                        dom.setAttribs(anchorElm, {
							href: editor.pdata.prefix+editor.pdata.current_id,
							target: null,
							rel: editor.pdata.advrel ? editor.pdata.advrel : null,
                            class: editor.pdata.pagelinkcss ? editor.pdata.pagelinkcss : null
						});
						selection.select(anchorElm);
                    }
                    else
                    {
                        editor.insertContent(dom.createHTML('a', {
    						href: '['+editor.pdata.prefix+editor.pdata.current_id+']]',
    						target: null,
    						rel: editor.pdata.advrel ? editor.pdata.advrel : null,
                            class: editor.pdata.pagelinkcss ? editor.pdata.pagelinkcss : null
		                }, text));
                    }
                }
            });
        }
    });
});